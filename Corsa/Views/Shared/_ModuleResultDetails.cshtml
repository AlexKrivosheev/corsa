@using Corsa.Domain.Models.Actions
@model Corsa.Domain.Models.Actions.UserActionDetails

@{
    var stateSuffix = (Model.Result == Corsa.Domain.Models.Actions.ActionExecutionResult.Successfully) ? "success" : "error";
}

<div id="moduleResultDetails" class="crs-module-result container-fluid">
    <div class="crs-action-details__header">
        <p class="crs-action-details__title @stateSuffix">
            @switch (Model.Result)
            {
                case ActionExecutionResult.Successfully:@: The action was a success.
                    break;
                case ActionExecutionResult.Error: @:During action ocurred errors.
                    break;
            }
        </p>
    </div>
    <div class="crs-module-result__details container-fluid crs-action-details">
        <div class="crs-action-details__title"> Details:</div>
        <p class="crs-action-details__start-time"> Start time : @Model.CreatedTime </p>
        <p class="crs-action-details__finished-time"> Finish time : @Model.FinishedTime  </p>
        <p class="crs-action-details__message"> Message: @Model.Message </p>
    </div>
    <div class="crs-module-result__logs crs-action-log container-fluid">
        <div class="crs-action-log__title"><h5> Logs: </h5></div>
        <div class="crs-action-log__content">

            @foreach (var log in Model.GetFullLogs())
            {

                <p class="crs-action-log__message"> <span class="crs-action-log__log-level__@log.LogLevel.ToLower()">@log.LogLevel</span> @log.Message</p>
            }
        </div>
    </div>
</div>